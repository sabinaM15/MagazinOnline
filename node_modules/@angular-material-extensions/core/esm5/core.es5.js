import { DOCUMENT, CommonModule } from '@angular/common';
import { Injectable, Inject, defineInjectable, inject, Component, Input, Output, EventEmitter, Optional, NgModule } from '@angular/core';
import { NavigationEnd, Router } from '@angular/router';
import { style, animate, AnimationBuilder } from '@angular/animations';
import { filter, take } from 'rxjs/operators';
import { FlexLayoutModule } from '@angular/flex-layout';
import { MatDialogRef, MAT_DIALOG_DATA, MatDialogModule, MatButtonModule, MatIconModule, MatInputModule, MatProgressSpinnerModule, MatRadioModule, MatSelectModule, MatMenuModule } from '@angular/material';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var MatSplashScreenService = /** @class */ (function () {
    function MatSplashScreenService$1(_animationBuilder, _document, _router) {
        this._animationBuilder = _animationBuilder;
        this._document = _document;
        this._router = _router;
    }
    /**
     * @param {?} selectorID
     * @return {?}
     */
    MatSplashScreenService$1.prototype.init = /**
     * @param {?} selectorID
     * @return {?}
     */
    function (selectorID) {
        var _this = this;
        // Get the splash screen element
        this.splashScreenEl = this._document.body.querySelector("#" + selectorID);
        // If the splash screen element exists...
        if (this.splashScreenEl) {
            // Hide it on the first NavigationEnd event
            this._router.events
                .pipe(filter(((/**
             * @param {?} event
             * @return {?}
             */
            function (event) { return event instanceof NavigationEnd; }))), take(1))
                .subscribe((/**
             * @return {?}
             */
            function () {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.hide();
                }));
            }));
        }
    };
    /**
     * Show the splash screen
     */
    /**
     * Show the splash screen
     * @return {?}
     */
    MatSplashScreenService$1.prototype.show = /**
     * Show the splash screen
     * @return {?}
     */
    function () {
        var _this = this;
        this.player =
            this._animationBuilder
                .build([
                style({
                    opacity: '0',
                    zIndex: '99999'
                }),
                animate('400ms ease', style({ opacity: '1' }))
            ]).create(this.splashScreenEl);
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.player.play();
        }), 0);
    };
    /**
     * Hide the splash screen
     */
    /**
     * Hide the splash screen
     * @return {?}
     */
    MatSplashScreenService$1.prototype.hide = /**
     * Hide the splash screen
     * @return {?}
     */
    function () {
        var _this = this;
        this.player =
            this._animationBuilder
                .build([
                style({ opacity: '1' }),
                animate('2000ms ease', style({
                    opacity: '0',
                    zIndex: '-10'
                }))
            ]).create(this.splashScreenEl);
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.player.play();
        }), 0);
    };
    MatSplashScreenService$1.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] },
    ];
    /** @nocollapse */
    MatSplashScreenService$1.ctorParameters = function () { return [
        { type: AnimationBuilder },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: Router }
    ]; };
    /** @nocollapse */ MatSplashScreenService$1.ngInjectableDef = defineInjectable({ factory: function MatSplashScreenService_Factory() { return new MatSplashScreenService(inject(AnimationBuilder), inject(DOCUMENT), inject(Router)); }, token: MatSplashScreenService, providedIn: "root" });
    return MatSplashScreenService$1;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var MatLanguageMenuComponent = /** @class */ (function () {
    function MatLanguageMenuComponent() {
        this.onLanguageChanged = new EventEmitter();
    }
    /**
     * @return {?}
     */
    MatLanguageMenuComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * Set the language
     *
     * @param lang
     */
    /**
     * Set the language
     *
     * @param {?} lang
     * @return {?}
     */
    MatLanguageMenuComponent.prototype.setLanguage = /**
     * Set the language
     *
     * @param {?} lang
     * @return {?}
     */
    function (lang) {
        // Set the selected language for the toolbar
        this.selectedLanguage = lang;
        // Use the selected language for translations
        // this._translateService.use(lang.id);
        this.onLanguageChanged.emit(lang.id);
    };
    MatLanguageMenuComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mat-language-menu',
                    template: "\n    <button mat-button\n            class=\"language-button\"\n            [matMenuTriggerFor]=\"languageMenu\">\n      <div fxLayout=\"row\" fxLayoutAlign=\"center center\">\n        <img class=\"flag mr-8\" [src]=\"'assets/images/flags/'+selectedLanguage?.flag+'.png'\">\n        <span class=\"iso text-uppercase\">{{selectedLanguage?.id}}</span>\n      </div>\n    </button>\n\n    <mat-menu #languageMenu=\"matMenu\" [overlapTrigger]=\"false\">\n\n      <button mat-menu-item *ngFor=\"let lang of languages\" (click)=\"setLanguage(lang)\">\n                        <span fxLayout=\"row\" fxLayoutAlign=\"start center\">\n                            <img class=\"flag mr-16\" [src]=\"'assets/images/flags/'+lang?.flag+'.png'\">\n                            <span class=\"iso\">{{lang?.title}}</span>\n                        </span>\n      </button>\n\n    </mat-menu>\n  ",
                    styles: ["\n    .language-button{min-width:64px;height:64px}button{outline:none}img{max-width:100%;height:16px;vertical-align:top;border:none;margin-right:8px}\n  "]
                },] },
    ];
    /** @nocollapse */
    MatLanguageMenuComponent.ctorParameters = function () { return []; };
    MatLanguageMenuComponent.propDecorators = {
        languages: [{ type: Input }],
        selectedLanguage: [{ type: Input }],
        onLanguageChanged: [{ type: Output }]
    };
    return MatLanguageMenuComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var MatAlertDialog = /** @class */ (function () {
    function MatAlertDialog(dialogRef, data) {
        this.dialogRef = dialogRef;
        this.data = data;
    }
    /**
     * @return {?}
     */
    MatAlertDialog.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.data) {
            this.title = this.data.title ? this.data.title : 'Alert';
            this.icon = this.data.icon ? this.data.icon : 'warning';
            this.type = this.data.type ? this.data.type : 'warn';
            this.message = this.data.message ? this.data.message : 'Cancel';
            this.okTextButton = this.data.okTextButton ? this.data.okTextButton : 'Ok';
        }
    };
    MatAlertDialog.decorators = [
        { type: Component, args: [{
                    selector: 'mat-alert-dialog',
                    template: "\n    <mat-dialog-content fxLayout=\"column\" fxLayoutAlign=\"center center\">\n      <mat-icon [color]=\"type\">{{icon}}</mat-icon>\n      <div class=\"title\">\n        {{title}}\n      </div>\n      <div class=\"subtitle\">\n        <p>{{message}}</p>\n      </div>\n    </mat-dialog-content>\n\n    <mat-dialog-actions fxLayoutAlign=\"center center\">\n      <button mat-raised-button\n              matDialogClose\n              [color]=\"type\">\n        {{okTextButton}}\n      </button>\n    </mat-dialog-actions>\n  ",
                    styles: ["\n    .material-icons{font-size:4rem}.mat-icon{height:4rem;width:4rem}.title{font-size:20px;margin-top:16px}.subtitle{margin:16px auto;max-width:300px;color:rgba(0,0,0,.54);font-size:15px;text-align:center}.subtitle p{display:block;-webkit-margin-before:1em;-webkit-margin-after:1em;-webkit-margin-start:0;-webkit-margin-end:0}\n  "]
                },] },
    ];
    /** @nocollapse */
    MatAlertDialog.ctorParameters = function () { return [
        { type: MatDialogRef },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DIALOG_DATA,] }] }
    ]; };
    return MatAlertDialog;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var MatAsyncDialog = /** @class */ (function () {
    function MatAsyncDialog(dialogRef, data) {
        this.dialogRef = dialogRef;
        this.data = data;
    }
    /**
     * @return {?}
     */
    MatAsyncDialog.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.data) {
            this.title = this.data.title ? this.data.title : 'Loading...';
            this.icon = this.data.icon ? this.data.icon : '';
            this.color = this.data.color ? this.data.color : 'primary';
        }
    };
    MatAsyncDialog.decorators = [
        { type: Component, args: [{
                    selector: 'mat-async-dialog',
                    template: "\n    <mat-dialog-content fxLayout=\"column\">\n      <div class=\"title\">\n        {{title}}\n      </div>\n      <div fxFlex fxLayout=\"row\" fxLayoutAlign=\"center center\">\n        <mat-spinner [color]=\"color\"></mat-spinner>\n      </div>\n    </mat-dialog-content>\n  ",
                    styles: ["\n    .title{font-size:20px;margin-top:16px;margin-bottom:16px}\n  "]
                },] },
    ];
    /** @nocollapse */
    MatAsyncDialog.ctorParameters = function () { return [
        { type: MatDialogRef },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DIALOG_DATA,] }] }
    ]; };
    return MatAsyncDialog;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var MatConfirmDialog = /** @class */ (function () {
    function MatConfirmDialog(dialogRef, data) {
        this.dialogRef = dialogRef;
        this.data = data;
    }
    /**
     * @return {?}
     */
    MatConfirmDialog.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.data) {
            this.title = this.data.title ? this.data.title : 'Confirm';
            this.confirmMessage = this.data.confirmMessage ? this.data.confirmMessage : 'Are you sure ?';
            this.confirmTextButton = this.data.confirmTextButton ? this.data.confirmTextButton : 'Confirm';
            this.cancelTextButton = this.data.cancelTextButton ? this.data.cancelTextButton : 'Cancel';
        }
    };
    MatConfirmDialog.decorators = [
        { type: Component, args: [{
                    selector: 'mat-confirm-dialog',
                    template: "\n    <h1 matDialogTitle>{{title}}</h1>\n    <div mat-dialog-content>{{confirmMessage}}</div>\n    <div mat-dialog-actions class=\"pt-24\">\n      <button mat-raised-button class=\"mat-accent mr-16\" (click)=\"dialogRef.close(true)\">{{confirmTextButton}}</button>\n      <button mat-button (click)=\"dialogRef.close(false)\">{{cancelTextButton}}</button>\n    </div>\n  ",
                    styles: ["\n\n  "]
                },] },
    ];
    /** @nocollapse */
    MatConfirmDialog.ctorParameters = function () { return [
        { type: MatDialogRef },
        { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
    ]; };
    return MatConfirmDialog;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var MatInputDialog = /** @class */ (function () {
    function MatInputDialog(dialogRef, data) {
        this.dialogRef = dialogRef;
        this.data = data;
    }
    /**
     * @return {?}
     */
    MatInputDialog.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.data) {
            this.title = this.data.title ? this.data.title : 'Enter the data';
            this.icon = this.data.icon ? this.data.icon : 'edit';
            this.color = this.data.color ? this.data.color : 'primary';
            this.placeholder = this.data.placeholder ? this.data.placeholder : '';
            this.textButton = this.data.textButton ? this.data.textButton : 'Ok';
        }
    };
    MatInputDialog.decorators = [
        { type: Component, args: [{
                    selector: 'mat-input-dialog',
                    template: "\n    <mat-dialog-content fxLayout=\"column\">\n      <div class=\"title\">\n        {{title}}\n      </div>\n      <div fxFlex fxLayout=\"row\" fxLayoutAlign=\"center center\">\n        <mat-form-field class=\"example-full-width\">\n          <input matInput #input [placeholder]=\"placeholder\">\n          <mat-icon matSuffix [color]=\"color\">{{icon}}</mat-icon>\n        </mat-form-field>\n      </div>\n    </mat-dialog-content>\n\n    <mat-dialog-actions fxLayoutAlign=\"center center\">\n      <button mat-raised-button\n              (click)=\"dialogRef.close(input.value)\"\n              [color]=\"color\">\n        {{textButton}}\n      </button>\n    </mat-dialog-actions>\n  ",
                    styles: ["\n    .title{font-size:20px;margin-top:16px;margin-bottom:16px}\n  "]
                },] },
    ];
    /** @nocollapse */
    MatInputDialog.ctorParameters = function () { return [
        { type: MatDialogRef },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DIALOG_DATA,] }] }
    ]; };
    return MatInputDialog;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var MatLoadingDialog = /** @class */ (function () {
    function MatLoadingDialog(dialogRef, data) {
        this.dialogRef = dialogRef;
        this.data = data;
    }
    /**
     * @return {?}
     */
    MatLoadingDialog.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.data) {
            this.title = this.data.title ? this.data.title : 'Loading...';
            this.icon = this.data.icon ? this.data.icon : '';
            this.color = this.data.color ? this.data.color : 'primary';
        }
    };
    MatLoadingDialog.decorators = [
        { type: Component, args: [{
                    selector: 'mat-loading-dialog',
                    template: "\n    <mat-dialog-content fxLayout=\"column\">\n      <div class=\"title\">\n        {{title}}\n      </div>\n      <div fxFlex fxLayout=\"row\" fxLayoutAlign=\"center center\">\n        <mat-spinner [color]=\"color\"></mat-spinner>\n      </div>\n    </mat-dialog-content>\n  ",
                    styles: ["\n    .title{font-size:20px;margin-top:16px;margin-bottom:16px}\n  "]
                },] },
    ];
    /** @nocollapse */
    MatLoadingDialog.ctorParameters = function () { return [
        { type: MatDialogRef },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DIALOG_DATA,] }] }
    ]; };
    return MatLoadingDialog;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var MatRadioDialog = /** @class */ (function () {
    function MatRadioDialog(dialogRef, data) {
        this.dialogRef = dialogRef;
        this.data = data;
    }
    /**
     * @return {?}
     */
    MatRadioDialog.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.data) {
            this.title = this.data.title ? this.data.title : 'Options';
            this.icon = this.data.icon ? this.data.icon : '';
            this.color = this.data.color ? this.data.color : 'primary';
            this.textButton = this.data.textButton ? this.data.textButton : 'OK';
            this.options = this.data.options ? this.data.options : null;
        }
    };
    MatRadioDialog.decorators = [
        { type: Component, args: [{
                    selector: 'mat-radio-dialog',
                    template: "\n    <mat-dialog-content fxLayout=\"column\">\n      <div class=\"title\">\n        {{title}}\n      </div>\n      <div fxFlex fxLayout=\"row\" fxLayoutAlign=\"center center\">\n        <mat-radio-group #radioGroup>\n          <mat-radio-button *ngFor=\"let option of options\" name=\"more_options\"\n                            [value]=\"option.value\">\n            {{option.viewValue ? option.viewValue : option.value}}\n          </mat-radio-button>\n        </mat-radio-group>\n      </div>\n    </mat-dialog-content>\n    <mat-dialog-actions fxLayoutAlign=\"center center\">\n      <button mat-raised-button\n              (click)=\"dialogRef.close(radioGroup.selected.value)\"\n              [color]=\"color\">\n        {{textButton}}\n      </button>\n    </mat-dialog-actions>\n  ",
                    styles: ["\n    .title{font-size:20px;margin-top:16px;margin-bottom:16px}mat-radio-group{display:flex;flex-direction:column;margin:15px 0}mat-radio-button{margin:5px}\n  "]
                },] },
    ];
    /** @nocollapse */
    MatRadioDialog.ctorParameters = function () { return [
        { type: MatDialogRef },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DIALOG_DATA,] }] }
    ]; };
    return MatRadioDialog;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var MatSelectDialog = /** @class */ (function () {
    function MatSelectDialog(dialogRef, data) {
        this.dialogRef = dialogRef;
        this.data = data;
    }
    /**
     * @return {?}
     */
    MatSelectDialog.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.data) {
            this.title = this.data.title ? this.data.title : 'Options';
            this.icon = this.data.icon ? this.data.icon : '';
            this.color = this.data.color ? this.data.color : 'primary';
            this.textButton = this.data.textButton ? this.data.textButton : 'OK';
            this.options = this.data.options ? this.data.options : null;
        }
    };
    MatSelectDialog.decorators = [
        { type: Component, args: [{
                    selector: 'mat-select-dialog',
                    template: "\n    <mat-dialog-content fxLayout=\"column\">\n      <div class=\"title\">\n        {{title}}\n      </div>\n      <div fxFlex fxLayout=\"row\" fxLayoutAlign=\"center center\">\n        <mat-form-field>\n          <mat-label>options</mat-label>\n          <mat-select #select>\n            <mat-option *ngFor=\"let option of options\" [value]=\"option.value\">\n              {{option.viewValue ? option.viewValue : option.value}}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </div>\n    </mat-dialog-content>\n\n    <mat-dialog-actions fxLayoutAlign=\"center center\">\n      <button mat-raised-button\n              (click)=\"dialogRef.close(select.selected.value)\"\n              [color]=\"color\">\n        {{textButton}}\n      </button>\n    </mat-dialog-actions>\n  ",
                    styles: ["\n    .title{font-size:20px;margin-top:16px;margin-bottom:16px}\n  "]
                },] },
    ];
    /** @nocollapse */
    MatSelectDialog.ctorParameters = function () { return [
        { type: MatDialogRef },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DIALOG_DATA,] }] }
    ]; };
    return MatSelectDialog;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var MatTimerDialog = /** @class */ (function () {
    function MatTimerDialog(dialogRef, data) {
        this.dialogRef = dialogRef;
        this.data = data;
    }
    /**
     * @return {?}
     */
    MatTimerDialog.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.data) {
            this.title = this.data.title ? this.data.title : 'Loading...';
            this.icon = this.data.icon ? this.data.icon : '';
            this.color = this.data.color ? this.data.color : 'primary';
        }
    };
    MatTimerDialog.decorators = [
        { type: Component, args: [{
                    selector: 'mat-timer-dialog',
                    template: "\n    <p>\n      mat-timer-dialog works!\n    </p>\n  ",
                    styles: ["\n\n  "]
                },] },
    ];
    /** @nocollapse */
    MatTimerDialog.ctorParameters = function () { return [
        { type: MatDialogRef },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DIALOG_DATA,] }] }
    ]; };
    return MatTimerDialog;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var dialogs = [
    MatAlertDialog,
    MatAsyncDialog,
    MatConfirmDialog,
    MatInputDialog,
    MatLoadingDialog,
    MatRadioDialog,
    MatSelectDialog,
    MatTimerDialog,
];
var MatDialogsModule = /** @class */ (function () {
    function MatDialogsModule() {
    }
    MatDialogsModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        FlexLayoutModule,
                        MatDialogModule,
                        MatButtonModule,
                        MatIconModule,
                        MatInputModule,
                        MatProgressSpinnerModule,
                        MatRadioModule,
                        MatSelectModule
                    ],
                    exports: dialogs.concat([MatDialogModule, FlexLayoutModule]),
                    entryComponents: dialogs.slice(),
                    declarations: dialogs.slice()
                },] },
    ];
    return MatDialogsModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var MatCoreModule = /** @class */ (function () {
    function MatCoreModule() {
    }
    /**
     * @return {?}
     */
    MatCoreModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: MatCoreModule,
            providers: [MatSplashScreenService]
        };
    };
    MatCoreModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        FlexLayoutModule,
                        MatButtonModule,
                        MatMenuModule
                        // MatDialogModule
                    ],
                    exports: [],
                    entryComponents: [],
                    declarations: [MatLanguageMenuComponent],
                },] },
    ];
    return MatCoreModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { MatAlertDialog, MatAsyncDialog, MatConfirmDialog, MatCoreModule, MatDialogsModule, MatInputDialog, MatLanguageMenuComponent, MatLoadingDialog, MatRadioDialog, MatSelectDialog, MatSplashScreenService, MatTimerDialog, dialogs as ɵa };
//# sourceMappingURL=core.es5.js.map
