!function(t,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports,require("@angular/common"),require("@angular/core"),require("@angular/router"),require("@angular/animations"),require("rxjs/operators"),require("@angular/flex-layout"),require("@angular/material")):"function"==typeof define&&define.amd?define(["exports","@angular/common","@angular/core","@angular/router","@angular/animations","rxjs/operators","@angular/flex-layout","@angular/material"],n):n((t=t||self).angularMaterialExtensionsCore={},t.ng.common,t.ng.core,t.i4,t.i2,t.operators,t.angularFlexLayout,t.angularMaterial)}(this,function(t,n,e,a,o,i,r,s){"use strict";var l=function(){function t(t,n,e){this._animationBuilder=t,this._document=n,this._router=e}return t.prototype.init=function(t){var n=this;this.splashScreenEl=this._document.body.querySelector("#"+t),this.splashScreenEl&&this._router.events.pipe(i.filter(function(t){return t instanceof a.NavigationEnd}),i.take(1)).subscribe(function(){setTimeout(function(){n.hide()})})},t.prototype.show=function(){var t=this;this.player=this._animationBuilder.build([o.style({opacity:"0",zIndex:"99999"}),o.animate("400ms ease",o.style({opacity:"1"}))]).create(this.splashScreenEl),setTimeout(function(){t.player.play()},0)},t.prototype.hide=function(){var t=this;this.player=this._animationBuilder.build([o.style({opacity:"1"}),o.animate("2000ms ease",o.style({opacity:"0",zIndex:"-10"}))]).create(this.splashScreenEl),setTimeout(function(){t.player.play()},0)},t.decorators=[{type:e.Injectable,args:[{providedIn:"root"}]}],t.ctorParameters=function(){return[{type:o.AnimationBuilder},{type:void 0,decorators:[{type:e.Inject,args:[n.DOCUMENT]}]},{type:a.Router}]},t.ngInjectableDef=e.defineInjectable({factory:function(){return new l(e.inject(o.AnimationBuilder),e.inject(n.DOCUMENT),e.inject(a.Router))},token:l,providedIn:"root"}),t}(),c=function(){function t(){this.onLanguageChanged=new e.EventEmitter}return t.prototype.ngOnInit=function(){},t.prototype.setLanguage=function(t){this.selectedLanguage=t,this.onLanguageChanged.emit(t.id)},t.decorators=[{type:e.Component,args:[{selector:"mat-language-menu",template:'\n    <button mat-button\n            class="language-button"\n            [matMenuTriggerFor]="languageMenu">\n      <div fxLayout="row" fxLayoutAlign="center center">\n        <img class="flag mr-8" [src]="\'assets/images/flags/\'+selectedLanguage?.flag+\'.png\'">\n        <span class="iso text-uppercase">{{selectedLanguage?.id}}</span>\n      </div>\n    </button>\n\n    <mat-menu #languageMenu="matMenu" [overlapTrigger]="false">\n\n      <button mat-menu-item *ngFor="let lang of languages" (click)="setLanguage(lang)">\n                        <span fxLayout="row" fxLayoutAlign="start center">\n                            <img class="flag mr-16" [src]="\'assets/images/flags/\'+lang?.flag+\'.png\'">\n                            <span class="iso">{{lang?.title}}</span>\n                        </span>\n      </button>\n\n    </mat-menu>\n  ',styles:["\n    .language-button{min-width:64px;height:64px}button{outline:none}img{max-width:100%;height:16px;vertical-align:top;border:none;margin-right:8px}\n  "]}]}],t.ctorParameters=function(){return[]},t.propDecorators={languages:[{type:e.Input}],selectedLanguage:[{type:e.Input}],onLanguageChanged:[{type:e.Output}]},t}(),u=function(){function t(t,n){this.dialogRef=t,this.data=n}return t.prototype.ngOnInit=function(){this.data&&(this.title=this.data.title?this.data.title:"Alert",this.icon=this.data.icon?this.data.icon:"warning",this.type=this.data.type?this.data.type:"warn",this.message=this.data.message?this.data.message:"Cancel",this.okTextButton=this.data.okTextButton?this.data.okTextButton:"Ok")},t.decorators=[{type:e.Component,args:[{selector:"mat-alert-dialog",template:'\n    <mat-dialog-content fxLayout="column" fxLayoutAlign="center center">\n      <mat-icon [color]="type">{{icon}}</mat-icon>\n      <div class="title">\n        {{title}}\n      </div>\n      <div class="subtitle">\n        <p>{{message}}</p>\n      </div>\n    </mat-dialog-content>\n\n    <mat-dialog-actions fxLayoutAlign="center center">\n      <button mat-raised-button\n              matDialogClose\n              [color]="type">\n        {{okTextButton}}\n      </button>\n    </mat-dialog-actions>\n  ',styles:["\n    .material-icons{font-size:4rem}.mat-icon{height:4rem;width:4rem}.title{font-size:20px;margin-top:16px}.subtitle{margin:16px auto;max-width:300px;color:rgba(0,0,0,.54);font-size:15px;text-align:center}.subtitle p{display:block;-webkit-margin-before:1em;-webkit-margin-after:1em;-webkit-margin-start:0;-webkit-margin-end:0}\n  "]}]}],t.ctorParameters=function(){return[{type:s.MatDialogRef},{type:void 0,decorators:[{type:e.Optional},{type:e.Inject,args:[s.MAT_DIALOG_DATA]}]}]},t}(),d=function(){function t(t,n){this.dialogRef=t,this.data=n}return t.prototype.ngOnInit=function(){this.data&&(this.title=this.data.title?this.data.title:"Loading...",this.icon=this.data.icon?this.data.icon:"",this.color=this.data.color?this.data.color:"primary")},t.decorators=[{type:e.Component,args:[{selector:"mat-async-dialog",template:'\n    <mat-dialog-content fxLayout="column">\n      <div class="title">\n        {{title}}\n      </div>\n      <div fxFlex fxLayout="row" fxLayoutAlign="center center">\n        <mat-spinner [color]="color"></mat-spinner>\n      </div>\n    </mat-dialog-content>\n  ',styles:["\n    .title{font-size:20px;margin-top:16px;margin-bottom:16px}\n  "]}]}],t.ctorParameters=function(){return[{type:s.MatDialogRef},{type:void 0,decorators:[{type:e.Optional},{type:e.Inject,args:[s.MAT_DIALOG_DATA]}]}]},t}(),p=function(){function t(t,n){this.dialogRef=t,this.data=n}return t.prototype.ngOnInit=function(){this.data&&(this.title=this.data.title?this.data.title:"Confirm",this.confirmMessage=this.data.confirmMessage?this.data.confirmMessage:"Are you sure ?",this.confirmTextButton=this.data.confirmTextButton?this.data.confirmTextButton:"Confirm",this.cancelTextButton=this.data.cancelTextButton?this.data.cancelTextButton:"Cancel")},t.decorators=[{type:e.Component,args:[{selector:"mat-confirm-dialog",template:'\n    <h1 matDialogTitle>{{title}}</h1>\n    <div mat-dialog-content>{{confirmMessage}}</div>\n    <div mat-dialog-actions class="pt-24">\n      <button mat-raised-button class="mat-accent mr-16" (click)="dialogRef.close(true)">{{confirmTextButton}}</button>\n      <button mat-button (click)="dialogRef.close(false)">{{cancelTextButton}}</button>\n    </div>\n  ',styles:["\n\n  "]}]}],t.ctorParameters=function(){return[{type:s.MatDialogRef},{type:void 0,decorators:[{type:e.Inject,args:[s.MAT_DIALOG_DATA]}]}]},t}(),g=function(){function t(t,n){this.dialogRef=t,this.data=n}return t.prototype.ngOnInit=function(){this.data&&(this.title=this.data.title?this.data.title:"Enter the data",this.icon=this.data.icon?this.data.icon:"edit",this.color=this.data.color?this.data.color:"primary",this.placeholder=this.data.placeholder?this.data.placeholder:"",this.textButton=this.data.textButton?this.data.textButton:"Ok")},t.decorators=[{type:e.Component,args:[{selector:"mat-input-dialog",template:'\n    <mat-dialog-content fxLayout="column">\n      <div class="title">\n        {{title}}\n      </div>\n      <div fxFlex fxLayout="row" fxLayoutAlign="center center">\n        <mat-form-field class="example-full-width">\n          <input matInput #input [placeholder]="placeholder">\n          <mat-icon matSuffix [color]="color">{{icon}}</mat-icon>\n        </mat-form-field>\n      </div>\n    </mat-dialog-content>\n\n    <mat-dialog-actions fxLayoutAlign="center center">\n      <button mat-raised-button\n              (click)="dialogRef.close(input.value)"\n              [color]="color">\n        {{textButton}}\n      </button>\n    </mat-dialog-actions>\n  ',styles:["\n    .title{font-size:20px;margin-top:16px;margin-bottom:16px}\n  "]}]}],t.ctorParameters=function(){return[{type:s.MatDialogRef},{type:void 0,decorators:[{type:e.Optional},{type:e.Inject,args:[s.MAT_DIALOG_DATA]}]}]},t}(),m=function(){function t(t,n){this.dialogRef=t,this.data=n}return t.prototype.ngOnInit=function(){this.data&&(this.title=this.data.title?this.data.title:"Loading...",this.icon=this.data.icon?this.data.icon:"",this.color=this.data.color?this.data.color:"primary")},t.decorators=[{type:e.Component,args:[{selector:"mat-loading-dialog",template:'\n    <mat-dialog-content fxLayout="column">\n      <div class="title">\n        {{title}}\n      </div>\n      <div fxFlex fxLayout="row" fxLayoutAlign="center center">\n        <mat-spinner [color]="color"></mat-spinner>\n      </div>\n    </mat-dialog-content>\n  ',styles:["\n    .title{font-size:20px;margin-top:16px;margin-bottom:16px}\n  "]}]}],t.ctorParameters=function(){return[{type:s.MatDialogRef},{type:void 0,decorators:[{type:e.Optional},{type:e.Inject,args:[s.MAT_DIALOG_DATA]}]}]},t}(),h=function(){function t(t,n){this.dialogRef=t,this.data=n}return t.prototype.ngOnInit=function(){this.data&&(this.title=this.data.title?this.data.title:"Options",this.icon=this.data.icon?this.data.icon:"",this.color=this.data.color?this.data.color:"primary",this.textButton=this.data.textButton?this.data.textButton:"OK",this.options=this.data.options?this.data.options:null)},t.decorators=[{type:e.Component,args:[{selector:"mat-radio-dialog",template:'\n    <mat-dialog-content fxLayout="column">\n      <div class="title">\n        {{title}}\n      </div>\n      <div fxFlex fxLayout="row" fxLayoutAlign="center center">\n        <mat-radio-group #radioGroup>\n          <mat-radio-button *ngFor="let option of options" name="more_options"\n                            [value]="option.value">\n            {{option.viewValue ? option.viewValue : option.value}}\n          </mat-radio-button>\n        </mat-radio-group>\n      </div>\n    </mat-dialog-content>\n    <mat-dialog-actions fxLayoutAlign="center center">\n      <button mat-raised-button\n              (click)="dialogRef.close(radioGroup.selected.value)"\n              [color]="color">\n        {{textButton}}\n      </button>\n    </mat-dialog-actions>\n  ',styles:["\n    .title{font-size:20px;margin-top:16px;margin-bottom:16px}mat-radio-group{display:flex;flex-direction:column;margin:15px 0}mat-radio-button{margin:5px}\n  "]}]}],t.ctorParameters=function(){return[{type:s.MatDialogRef},{type:void 0,decorators:[{type:e.Optional},{type:e.Inject,args:[s.MAT_DIALOG_DATA]}]}]},t}(),f=function(){function t(t,n){this.dialogRef=t,this.data=n}return t.prototype.ngOnInit=function(){this.data&&(this.title=this.data.title?this.data.title:"Options",this.icon=this.data.icon?this.data.icon:"",this.color=this.data.color?this.data.color:"primary",this.textButton=this.data.textButton?this.data.textButton:"OK",this.options=this.data.options?this.data.options:null)},t.decorators=[{type:e.Component,args:[{selector:"mat-select-dialog",template:'\n    <mat-dialog-content fxLayout="column">\n      <div class="title">\n        {{title}}\n      </div>\n      <div fxFlex fxLayout="row" fxLayoutAlign="center center">\n        <mat-form-field>\n          <mat-label>options</mat-label>\n          <mat-select #select>\n            <mat-option *ngFor="let option of options" [value]="option.value">\n              {{option.viewValue ? option.viewValue : option.value}}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </div>\n    </mat-dialog-content>\n\n    <mat-dialog-actions fxLayoutAlign="center center">\n      <button mat-raised-button\n              (click)="dialogRef.close(select.selected.value)"\n              [color]="color">\n        {{textButton}}\n      </button>\n    </mat-dialog-actions>\n  ',styles:["\n    .title{font-size:20px;margin-top:16px;margin-bottom:16px}\n  "]}]}],t.ctorParameters=function(){return[{type:s.MatDialogRef},{type:void 0,decorators:[{type:e.Optional},{type:e.Inject,args:[s.MAT_DIALOG_DATA]}]}]},t}(),y=function(){function t(t,n){this.dialogRef=t,this.data=n}return t.prototype.ngOnInit=function(){this.data&&(this.title=this.data.title?this.data.title:"Loading...",this.icon=this.data.icon?this.data.icon:"",this.color=this.data.color?this.data.color:"primary")},t.decorators=[{type:e.Component,args:[{selector:"mat-timer-dialog",template:"\n    <p>\n      mat-timer-dialog works!\n    </p>\n  ",styles:["\n\n  "]}]}],t.ctorParameters=function(){return[{type:s.MatDialogRef},{type:void 0,decorators:[{type:e.Optional},{type:e.Inject,args:[s.MAT_DIALOG_DATA]}]}]},t}(),x=[u,d,p,g,m,h,f,y],M=function(){function t(){}return t.decorators=[{type:e.NgModule,args:[{imports:[n.CommonModule,r.FlexLayoutModule,s.MatDialogModule,s.MatButtonModule,s.MatIconModule,s.MatInputModule,s.MatProgressSpinnerModule,s.MatRadioModule,s.MatSelectModule],exports:x.concat([s.MatDialogModule,r.FlexLayoutModule]),entryComponents:x.slice(),declarations:x.slice()}]}],t}(),v=function(){function t(){}return t.forRoot=function(){return{ngModule:t,providers:[l]}},t.decorators=[{type:e.NgModule,args:[{imports:[n.CommonModule,r.FlexLayoutModule,s.MatButtonModule,s.MatMenuModule],exports:[],entryComponents:[],declarations:[c]}]}],t}();t.MatAlertDialog=u,t.MatAsyncDialog=d,t.MatConfirmDialog=p,t.MatCoreModule=v,t.MatDialogsModule=M,t.MatInputDialog=g,t.MatLanguageMenuComponent=c,t.MatLoadingDialog=m,t.MatRadioDialog=h,t.MatSelectDialog=f,t.MatSplashScreenService=l,t.MatTimerDialog=y,t.ɵa=x,Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=core.umd.min.js.map
