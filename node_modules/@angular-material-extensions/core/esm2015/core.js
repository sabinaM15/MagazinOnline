import { DOCUMENT, CommonModule } from '@angular/common';
import { Injectable, Inject, defineInjectable, inject, EventEmitter, Component, Input, Output, Optional, NgModule } from '@angular/core';
import { NavigationEnd, Router } from '@angular/router';
import { style, animate, AnimationBuilder } from '@angular/animations';
import { filter, take } from 'rxjs/operators';
import { FlexLayoutModule } from '@angular/flex-layout';
import { MatDialogRef, MAT_DIALOG_DATA, MatDialogModule, MatButtonModule, MatIconModule, MatInputModule, MatProgressSpinnerModule, MatRadioModule, MatSelectModule, MatMenuModule } from '@angular/material';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MatSplashScreenService {
    /**
     * @param {?} _animationBuilder
     * @param {?} _document
     * @param {?} _router
     */
    constructor(_animationBuilder, _document, _router) {
        this._animationBuilder = _animationBuilder;
        this._document = _document;
        this._router = _router;
    }
    /**
     * @param {?} selectorID
     * @return {?}
     */
    init(selectorID) {
        // Get the splash screen element
        this.splashScreenEl = this._document.body.querySelector(`#${selectorID}`);
        // If the splash screen element exists...
        if (this.splashScreenEl) {
            // Hide it on the first NavigationEnd event
            this._router.events
                .pipe(filter(((/**
             * @param {?} event
             * @return {?}
             */
            event => event instanceof NavigationEnd))), take(1))
                .subscribe((/**
             * @return {?}
             */
            () => {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.hide();
                }));
            }));
        }
    }
    /**
     * Show the splash screen
     * @return {?}
     */
    show() {
        this.player =
            this._animationBuilder
                .build([
                style({
                    opacity: '0',
                    zIndex: '99999'
                }),
                animate('400ms ease', style({ opacity: '1' }))
            ]).create(this.splashScreenEl);
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.player.play();
        }), 0);
    }
    /**
     * Hide the splash screen
     * @return {?}
     */
    hide() {
        this.player =
            this._animationBuilder
                .build([
                style({ opacity: '1' }),
                animate('2000ms ease', style({
                    opacity: '0',
                    zIndex: '-10'
                }))
            ]).create(this.splashScreenEl);
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.player.play();
        }), 0);
    }
}
MatSplashScreenService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
];
/** @nocollapse */
MatSplashScreenService.ctorParameters = () => [
    { type: AnimationBuilder },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: Router }
];
/** @nocollapse */ MatSplashScreenService.ngInjectableDef = defineInjectable({ factory: function MatSplashScreenService_Factory() { return new MatSplashScreenService(inject(AnimationBuilder), inject(DOCUMENT), inject(Router)); }, token: MatSplashScreenService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MatLanguageMenuComponent {
    constructor() {
        this.onLanguageChanged = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * Set the language
     *
     * @param {?} lang
     * @return {?}
     */
    setLanguage(lang) {
        // Set the selected language for the toolbar
        this.selectedLanguage = lang;
        // Use the selected language for translations
        // this._translateService.use(lang.id);
        this.onLanguageChanged.emit(lang.id);
    }
}
MatLanguageMenuComponent.decorators = [
    { type: Component, args: [{
                selector: 'mat-language-menu',
                template: `
    <button mat-button
            class="language-button"
            [matMenuTriggerFor]="languageMenu">
      <div fxLayout="row" fxLayoutAlign="center center">
        <img class="flag mr-8" [src]="'assets/images/flags/'+selectedLanguage?.flag+'.png'">
        <span class="iso text-uppercase">{{selectedLanguage?.id}}</span>
      </div>
    </button>

    <mat-menu #languageMenu="matMenu" [overlapTrigger]="false">

      <button mat-menu-item *ngFor="let lang of languages" (click)="setLanguage(lang)">
                        <span fxLayout="row" fxLayoutAlign="start center">
                            <img class="flag mr-16" [src]="'assets/images/flags/'+lang?.flag+'.png'">
                            <span class="iso">{{lang?.title}}</span>
                        </span>
      </button>

    </mat-menu>
  `,
                styles: [`
    .language-button{min-width:64px;height:64px}button{outline:none}img{max-width:100%;height:16px;vertical-align:top;border:none;margin-right:8px}
  `]
            },] },
];
/** @nocollapse */
MatLanguageMenuComponent.ctorParameters = () => [];
MatLanguageMenuComponent.propDecorators = {
    languages: [{ type: Input }],
    selectedLanguage: [{ type: Input }],
    onLanguageChanged: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MatAlertDialog {
    /**
     * @param {?} dialogRef
     * @param {?} data
     */
    constructor(dialogRef, data) {
        this.dialogRef = dialogRef;
        this.data = data;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.data) {
            this.title = this.data.title ? this.data.title : 'Alert';
            this.icon = this.data.icon ? this.data.icon : 'warning';
            this.type = this.data.type ? this.data.type : 'warn';
            this.message = this.data.message ? this.data.message : 'Cancel';
            this.okTextButton = this.data.okTextButton ? this.data.okTextButton : 'Ok';
        }
    }
}
MatAlertDialog.decorators = [
    { type: Component, args: [{
                selector: 'mat-alert-dialog',
                template: `
    <mat-dialog-content fxLayout="column" fxLayoutAlign="center center">
      <mat-icon [color]="type">{{icon}}</mat-icon>
      <div class="title">
        {{title}}
      </div>
      <div class="subtitle">
        <p>{{message}}</p>
      </div>
    </mat-dialog-content>

    <mat-dialog-actions fxLayoutAlign="center center">
      <button mat-raised-button
              matDialogClose
              [color]="type">
        {{okTextButton}}
      </button>
    </mat-dialog-actions>
  `,
                styles: [`
    .material-icons{font-size:4rem}.mat-icon{height:4rem;width:4rem}.title{font-size:20px;margin-top:16px}.subtitle{margin:16px auto;max-width:300px;color:rgba(0,0,0,.54);font-size:15px;text-align:center}.subtitle p{display:block;-webkit-margin-before:1em;-webkit-margin-after:1em;-webkit-margin-start:0;-webkit-margin-end:0}
  `]
            },] },
];
/** @nocollapse */
MatAlertDialog.ctorParameters = () => [
    { type: MatDialogRef },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DIALOG_DATA,] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MatAsyncDialog {
    /**
     * @param {?} dialogRef
     * @param {?} data
     */
    constructor(dialogRef, data) {
        this.dialogRef = dialogRef;
        this.data = data;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.data) {
            this.title = this.data.title ? this.data.title : 'Loading...';
            this.icon = this.data.icon ? this.data.icon : '';
            this.color = this.data.color ? this.data.color : 'primary';
        }
    }
}
MatAsyncDialog.decorators = [
    { type: Component, args: [{
                selector: 'mat-async-dialog',
                template: `
    <mat-dialog-content fxLayout="column">
      <div class="title">
        {{title}}
      </div>
      <div fxFlex fxLayout="row" fxLayoutAlign="center center">
        <mat-spinner [color]="color"></mat-spinner>
      </div>
    </mat-dialog-content>
  `,
                styles: [`
    .title{font-size:20px;margin-top:16px;margin-bottom:16px}
  `]
            },] },
];
/** @nocollapse */
MatAsyncDialog.ctorParameters = () => [
    { type: MatDialogRef },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DIALOG_DATA,] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MatConfirmDialog {
    /**
     * @param {?} dialogRef
     * @param {?} data
     */
    constructor(dialogRef, data) {
        this.dialogRef = dialogRef;
        this.data = data;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.data) {
            this.title = this.data.title ? this.data.title : 'Confirm';
            this.confirmMessage = this.data.confirmMessage ? this.data.confirmMessage : 'Are you sure ?';
            this.confirmTextButton = this.data.confirmTextButton ? this.data.confirmTextButton : 'Confirm';
            this.cancelTextButton = this.data.cancelTextButton ? this.data.cancelTextButton : 'Cancel';
        }
    }
}
MatConfirmDialog.decorators = [
    { type: Component, args: [{
                selector: 'mat-confirm-dialog',
                template: `
    <h1 matDialogTitle>{{title}}</h1>
    <div mat-dialog-content>{{confirmMessage}}</div>
    <div mat-dialog-actions class="pt-24">
      <button mat-raised-button class="mat-accent mr-16" (click)="dialogRef.close(true)">{{confirmTextButton}}</button>
      <button mat-button (click)="dialogRef.close(false)">{{cancelTextButton}}</button>
    </div>
  `,
                styles: [`

  `]
            },] },
];
/** @nocollapse */
MatConfirmDialog.ctorParameters = () => [
    { type: MatDialogRef },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MatInputDialog {
    /**
     * @param {?} dialogRef
     * @param {?} data
     */
    constructor(dialogRef, data) {
        this.dialogRef = dialogRef;
        this.data = data;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.data) {
            this.title = this.data.title ? this.data.title : 'Enter the data';
            this.icon = this.data.icon ? this.data.icon : 'edit';
            this.color = this.data.color ? this.data.color : 'primary';
            this.placeholder = this.data.placeholder ? this.data.placeholder : '';
            this.textButton = this.data.textButton ? this.data.textButton : 'Ok';
        }
    }
}
MatInputDialog.decorators = [
    { type: Component, args: [{
                selector: 'mat-input-dialog',
                template: `
    <mat-dialog-content fxLayout="column">
      <div class="title">
        {{title}}
      </div>
      <div fxFlex fxLayout="row" fxLayoutAlign="center center">
        <mat-form-field class="example-full-width">
          <input matInput #input [placeholder]="placeholder">
          <mat-icon matSuffix [color]="color">{{icon}}</mat-icon>
        </mat-form-field>
      </div>
    </mat-dialog-content>

    <mat-dialog-actions fxLayoutAlign="center center">
      <button mat-raised-button
              (click)="dialogRef.close(input.value)"
              [color]="color">
        {{textButton}}
      </button>
    </mat-dialog-actions>
  `,
                styles: [`
    .title{font-size:20px;margin-top:16px;margin-bottom:16px}
  `]
            },] },
];
/** @nocollapse */
MatInputDialog.ctorParameters = () => [
    { type: MatDialogRef },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DIALOG_DATA,] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MatLoadingDialog {
    /**
     * @param {?} dialogRef
     * @param {?} data
     */
    constructor(dialogRef, data) {
        this.dialogRef = dialogRef;
        this.data = data;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.data) {
            this.title = this.data.title ? this.data.title : 'Loading...';
            this.icon = this.data.icon ? this.data.icon : '';
            this.color = this.data.color ? this.data.color : 'primary';
        }
    }
}
MatLoadingDialog.decorators = [
    { type: Component, args: [{
                selector: 'mat-loading-dialog',
                template: `
    <mat-dialog-content fxLayout="column">
      <div class="title">
        {{title}}
      </div>
      <div fxFlex fxLayout="row" fxLayoutAlign="center center">
        <mat-spinner [color]="color"></mat-spinner>
      </div>
    </mat-dialog-content>
  `,
                styles: [`
    .title{font-size:20px;margin-top:16px;margin-bottom:16px}
  `]
            },] },
];
/** @nocollapse */
MatLoadingDialog.ctorParameters = () => [
    { type: MatDialogRef },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DIALOG_DATA,] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MatRadioDialog {
    /**
     * @param {?} dialogRef
     * @param {?} data
     */
    constructor(dialogRef, data) {
        this.dialogRef = dialogRef;
        this.data = data;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.data) {
            this.title = this.data.title ? this.data.title : 'Options';
            this.icon = this.data.icon ? this.data.icon : '';
            this.color = this.data.color ? this.data.color : 'primary';
            this.textButton = this.data.textButton ? this.data.textButton : 'OK';
            this.options = this.data.options ? this.data.options : null;
        }
    }
}
MatRadioDialog.decorators = [
    { type: Component, args: [{
                selector: 'mat-radio-dialog',
                template: `
    <mat-dialog-content fxLayout="column">
      <div class="title">
        {{title}}
      </div>
      <div fxFlex fxLayout="row" fxLayoutAlign="center center">
        <mat-radio-group #radioGroup>
          <mat-radio-button *ngFor="let option of options" name="more_options"
                            [value]="option.value">
            {{option.viewValue ? option.viewValue : option.value}}
          </mat-radio-button>
        </mat-radio-group>
      </div>
    </mat-dialog-content>
    <mat-dialog-actions fxLayoutAlign="center center">
      <button mat-raised-button
              (click)="dialogRef.close(radioGroup.selected.value)"
              [color]="color">
        {{textButton}}
      </button>
    </mat-dialog-actions>
  `,
                styles: [`
    .title{font-size:20px;margin-top:16px;margin-bottom:16px}mat-radio-group{display:flex;flex-direction:column;margin:15px 0}mat-radio-button{margin:5px}
  `]
            },] },
];
/** @nocollapse */
MatRadioDialog.ctorParameters = () => [
    { type: MatDialogRef },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DIALOG_DATA,] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MatSelectDialog {
    /**
     * @param {?} dialogRef
     * @param {?} data
     */
    constructor(dialogRef, data) {
        this.dialogRef = dialogRef;
        this.data = data;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.data) {
            this.title = this.data.title ? this.data.title : 'Options';
            this.icon = this.data.icon ? this.data.icon : '';
            this.color = this.data.color ? this.data.color : 'primary';
            this.textButton = this.data.textButton ? this.data.textButton : 'OK';
            this.options = this.data.options ? this.data.options : null;
        }
    }
}
MatSelectDialog.decorators = [
    { type: Component, args: [{
                selector: 'mat-select-dialog',
                template: `
    <mat-dialog-content fxLayout="column">
      <div class="title">
        {{title}}
      </div>
      <div fxFlex fxLayout="row" fxLayoutAlign="center center">
        <mat-form-field>
          <mat-label>options</mat-label>
          <mat-select #select>
            <mat-option *ngFor="let option of options" [value]="option.value">
              {{option.viewValue ? option.viewValue : option.value}}
            </mat-option>
          </mat-select>
        </mat-form-field>
      </div>
    </mat-dialog-content>

    <mat-dialog-actions fxLayoutAlign="center center">
      <button mat-raised-button
              (click)="dialogRef.close(select.selected.value)"
              [color]="color">
        {{textButton}}
      </button>
    </mat-dialog-actions>
  `,
                styles: [`
    .title{font-size:20px;margin-top:16px;margin-bottom:16px}
  `]
            },] },
];
/** @nocollapse */
MatSelectDialog.ctorParameters = () => [
    { type: MatDialogRef },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DIALOG_DATA,] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MatTimerDialog {
    /**
     * @param {?} dialogRef
     * @param {?} data
     */
    constructor(dialogRef, data) {
        this.dialogRef = dialogRef;
        this.data = data;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.data) {
            this.title = this.data.title ? this.data.title : 'Loading...';
            this.icon = this.data.icon ? this.data.icon : '';
            this.color = this.data.color ? this.data.color : 'primary';
        }
    }
}
MatTimerDialog.decorators = [
    { type: Component, args: [{
                selector: 'mat-timer-dialog',
                template: `
    <p>
      mat-timer-dialog works!
    </p>
  `,
                styles: [`

  `]
            },] },
];
/** @nocollapse */
MatTimerDialog.ctorParameters = () => [
    { type: MatDialogRef },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DIALOG_DATA,] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const dialogs = [
    MatAlertDialog,
    MatAsyncDialog,
    MatConfirmDialog,
    MatInputDialog,
    MatLoadingDialog,
    MatRadioDialog,
    MatSelectDialog,
    MatTimerDialog,
];
class MatDialogsModule {
}
MatDialogsModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FlexLayoutModule,
                    MatDialogModule,
                    MatButtonModule,
                    MatIconModule,
                    MatInputModule,
                    MatProgressSpinnerModule,
                    MatRadioModule,
                    MatSelectModule
                ],
                exports: [...dialogs, MatDialogModule, FlexLayoutModule],
                entryComponents: [...dialogs],
                declarations: [...dialogs]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MatCoreModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: MatCoreModule,
            providers: [MatSplashScreenService]
        };
    }
}
MatCoreModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FlexLayoutModule,
                    MatButtonModule,
                    MatMenuModule
                    // MatDialogModule
                ],
                exports: [],
                entryComponents: [],
                declarations: [MatLanguageMenuComponent],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { MatAlertDialog, MatAsyncDialog, MatConfirmDialog, MatCoreModule, MatDialogsModule, MatInputDialog, MatLanguageMenuComponent, MatLoadingDialog, MatRadioDialog, MatSelectDialog, MatSplashScreenService, MatTimerDialog, dialogs as ɵa };
//# sourceMappingURL=core.js.map
